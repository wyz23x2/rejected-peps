================================================
:pep:`211`: Adding A New Outer Product Operator
================================================

First, let's see what :func:`itertools.product` does::

    >>> from itertools import product as p
    >>> list(p([1, 2, 3], [4, 5, 6]))
    [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]
    >>> list(p([1, 2, 3], repeat=2))  # => p(A, repeat=2) == p(A, A) etc.
    [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]

Thus, this::

    for i, j in p(a, b):
        ...

Is equivalent to this::

    for i in a:
        for j in b:
            ...

:func:`pep211.wrapper` wraps an object to make it support ``@`` representing ``product``::

    >>> from rejected_peps.pep211 import wrapper as w
    >>> list(w([1, 2]) @ w([3, 4]))
    [(1, 3), (1, 4), (2, 3), (2, 4)]
    >>> list(w([1, 2]) @ [3, 4])
    [(1, 3), (1, 4), (2, 3), (2, 4)]
    >>> list((1, 2) @ w({3, 4}))
    [(1, 3), (1, 4), (2, 3), (2, 4)]
    >>> list(w([1, 2]) @ 2)  # ==> repeat = 2
    [(1, 1), (1, 2), (2, 1), (2, 2)]

So when either ``a`` or ``b`` is wrapped, you can do::

    for i, j in a @ b:
        ...
